{"version":3,"file":"static/webpack/static/development/pages/restaurants.js.49e72bc0e5c691b9e5ce.hot-update.js","sources":["webpack:///./pages/restaurants.js"],"sourcesContent":["/* /pages/restaurants.js */\n\nimport gql from \"graphql-tag\";\nimport { withRouter } from \"next/router\";\nimport { graphql } from \"react-apollo\";\nimport { compose } from \"recompose\";\n// import { withContext } from \"../components/Context/AppProvider\";\nimport {\n  Button,\n  Card,\n  CardBody,\n  CardColumns,\n  CardImg,\n  CardSubtitle,\n  CardText,\n  CardTitle,\n  Col,\n  Row\n} from \"reactstrap\";\n// import Cart from \"../components/Cart/Cart\";\n// import defaultPage from \"../hocs/defaultPage\";\n\nclass Restaurants extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  addItem(item) {\n    this.props.context.addItem(item);\n  }\n  render() {\n    const {\n      data: { loading, error, restaurant },\n      router,\n      context,\n      isAuthenticated\n    } = this.props;\n    if (error) return \"Error Loading Dishes\";\n\n    if (restaurant) {\n      return (\n        <>\n          <h1>{restaurant.name}</h1>\n          <Row>\n            <Col xs=\"9\" style={{ padding: 0 }}>\n              <div style={{ display: \"inline-block\" }} className=\"h-100\">\n                {restaurant.dishes.map(res => (\n                  <Card\n                    style={{ width: \"30%\", margin: \"0 10px\" }}\n                    key={res._id}\n                  >\n                    <CardImg\n                      top={true}\n                      style={{ height: 250 }}\n                      src={res.image\n                        ? `http://localhost:1337${res.image.url}`\n                        : 'https://www.placecage.com/c/800/300'\n                      }\n                    />\n                    <CardBody>\n                      <CardTitle>{res.name}</CardTitle>\n                      <CardText>{res.description}</CardText>\n                    </CardBody>\n                    <div className=\"card-footer\">\n                      <Button\n                        onClick={this.addItem.bind(this, res)}\n                        outline\n                        color=\"primary\"\n                      >\n                        + Add To Cart\n                      </Button>\n\n                      <style jsx>\n                        {`\n                          a {\n                            color: white;\n                          }\n                          a:link {\n                            text-decoration: none;\n                            color: white;\n                          }\n                          .container-fluid {\n                            margin-bottom: 30px;\n                          }\n                          .btn-outline-primary {\n                            color: #007bff !important;\n                          }\n                          a:hover {\n                            color: white !important;\n                          }\n                        `}\n                      </style>\n                    </div>\n                  </Card>\n                ))}\n              </div>\n            </Col>\n            <Col xs=\"3\" style={{ padding: 0 }}>\n              <div>\n                Cart\n                {/* <Cart isAuthenticated={isAuthenticated} /> */}\n              </div>\n            </Col>\n          </Row>\n        </>\n      );\n    }\n    return <h1>Loading</h1>;\n  }\n}\n\nconst GET_RESTAURANT_DISHES = gql`\n  query($id: ID!) {\n    restaurant(id: $id) {\n      id\n      name\n      dishes {\n        id\n        name\n        description\n        price\n        image {\n          url\n        }\n      }\n    }\n  }\n`;\n// The `graphql` wrapper executes a GraphQL query and makes the results\n// available on the `data` prop of the wrapped component (RestaurantList)\n\nexport default compose(\n  withRouter,\n  // defaultPage,\n  // withContext,\n  graphql(GET_RESTAURANT_DISHES, {\n    options: props => {\n      return {\n        variables: {\n          id: props.router.query.id\n        }\n      };\n    },\n    props: ({ data }) => ({ data })\n  })\n)(Restaurants);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAaA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AAEA;AACA;;;AACA;AACA;AACA;;;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;AACA;AAIA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAFA;AAKA;AACA;AAAA;AAAA;AACA;AAHA;AAYA;AAAA;AAEA;AACA;AACA;AAHA;AADA;AAAA;AAjBA;AAmDA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AAAA;AACA;;;;AAtFA;AACA;AAwFA;AAkBA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AADA;AADA;AAKA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AARA;;;;A","sourceRoot":""}